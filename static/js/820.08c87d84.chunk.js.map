{"version":3,"file":"static/js/820.08c87d84.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.js","components/MovieList/MovieList.jsx","pages/Movies/Movies.js","services/api.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport { NavLink as StyledLink } from 'react-router-dom';\n\nexport const Container = styled.ul`\n  padding: 15px;\n  list-style: none;\n`;\nexport const MoviesLink = styled(StyledLink)`\n  text-decoration: none;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from \"react-router-dom\";\nimport { Container, MoviesLink } from './MovieList.styled';\n\nconst MovieList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <Container>\n      {movies.map(({ id, name, title }) => (\n        <li key={id}>\n          <MoviesLink state={{ from: location }} to={`/movies/${id}`}>\n            {title || name}\n          </MoviesLink>\n        </li>\n      ))}\n    </Container>\n  );\n};\n\nMovieList.propTypes = { movies: PropTypes.array };\n\nexport default MovieList;","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MovieList from 'components/MovieList/MovieList';\nimport { fetchMovieSearch } from 'services/api';\nimport Loader from 'components/Loader/Loader';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDownloaded, setIsDownloaded] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (!query) return;\n\n    const fetchData = async () => {\n      try {\n        const res = await fetchMovieSearch(query);\n        setMovies(res.results);\n      } catch (error) {\n        setError(error.name);\n      } finally {\n        setIsLoading(false);\n        setIsDownloaded(true);\n      }\n    };\n\n    fetchData(query);\n  }, [query]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    setSearchParams({ query: form.elements.input.value });\n    form.reset();\n  };\n\n  return (\n    <div>\n      <form onSubmit={onSubmit}>\n        <input type=\"text\" autoComplete=\"off\" name=\"input\" autoFocus />\n        <button type=\"submit\">Search</button>\n      </form>\n      <div>\n        {isLoading && <Loader />}\n        {error && { error }}\n        {movies.length === 0 && isDownloaded && (\n          <div>Nothing here. Try again!</div>\n        )}\n        <MovieList movies={movies} />\n      </div>\n    </div>\n  );\n};\nexport default Movies;\n","import axios from 'axios';\nexport const BASE_URL = 'https://api.themoviedb.org/3';\nexport const USER_KEY = '9e4f0ad78cbe1148a9d4c0c8389afc83';\nconst PARAMETERS_TRENDING = '/trending/all/day';\n\nexport async function fetchTrendings() {\n  const { data } = await axios.get(\n    `${BASE_URL}${PARAMETERS_TRENDING}?api_key=${USER_KEY}`\n  );\n  return data;\n}\n\nexport async function fetchMovieId(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}?api_key=${USER_KEY}`\n  );\n  return data;\n}\n\nexport async function fetchMovieSearch(query) {\n  const { data } = await axios.get(\n    `${BASE_URL}/search/movie?api_key=${USER_KEY}&language=en-US&query=${query}&page=1`\n  );\n  return data;\n}\nexport async function fetchMovieCast(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/credits?api_key=${USER_KEY}`\n  );\n  return data;\n}\n\nexport async function fetchMovieReviews(id) {\n  const { data } = await axios.get(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${USER_KEY}`\n  );\n  return data;\n}\n"],"names":["Container","styled","MoviesLink","StyledLink","movies","location","useLocation","map","id","name","title","state","from","to","useState","setMovies","error","setError","isLoading","setIsLoading","isDownloaded","setIsDownloaded","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchData","fetchMovieSearch","res","results","onSubmit","e","preventDefault","form","currentTarget","elements","input","value","reset","type","autoComplete","autoFocus","length","BASE_URL","USER_KEY","PARAMETERS_TRENDING","fetchTrendings","axios","data","fetchMovieId","fetchMovieCast","fetchMovieReviews"],"sourceRoot":""}